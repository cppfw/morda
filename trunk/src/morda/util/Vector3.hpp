/* The MIT License:

Copyright (c) 2008-2012 Ivan Gagis <igagis@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

// Home page: http://morda.googlecode.com

/**
 * @author Ivan Gagis <igagis@gmail.com>
 */

#pragma once

#ifdef DEBUG
#	include <iostream>
#endif

#include <ting/debug.hpp>
#include <ting/math.hpp>



namespace morda{


//forward declarations
template <class T> class Vector2;
template <class T> class Matrix4;
template <class T> class Quaternion;



template <class T> class Vector3{
	friend class Vector2<T>;
	friend class Matrix4<T>;

	STATIC_ASSERT(sizeof(Vector3) == sizeof(T) * 3)
public:

	//TODO: doxygen
	T x;
	
	//TODO: doxygen
	T y;
	
	//TODO: doxygen
	T z;

	//TODO: doxygen
	inline Vector3()throw(){}//default constructor

	//TODO: doxygen
	inline Vector3(T x, T y, T z)throw() :
			x(x),
			y(y),
			z(z)
	{}

	//copy constructor will be generated by compiler

	//TODO: doxygen
	inline Vector3(T num)throw() :
			x(num),
			y(num),
			z(num)
	{}

	//TODO: doxygen
	inline Vector3(const Vector2<T>& vec)throw();

	//TODO: doxygen
	inline T& operator[](unsigned i)throw(){
		ASSERT(i < 3)
		ASSERT( &((&this->x)[0]) == &this->x)
		ASSERT( &((&this->x)[1]) == &this->y)
		ASSERT( &((&this->x)[2]) == &this->z)
		return (&this->x)[i];
	}

	//TODO: doxygen
	inline const T& operator[](unsigned i)const throw(){
		ASSERT(i < 3)
		ASSERT( &((&this->x)[0]) == &this->x)
		ASSERT( &((&this->x)[1]) == &this->y)
		ASSERT( &((&this->x)[2]) == &this->z)
		return (&this->x)[i];
	}

	//NOTE: operator=() will be generated by compiler.

	//TODO: doxygen
	inline Vector3& operator=(const Vector2<T>& vec)throw();

	//TODO: doxygen
	inline Vector3& operator=(T num)throw(){
		this->x = num;
		this->y = num;
		this->z = num;
		return (*this);
	}

	//TODO: doxygen
	inline Vector3& operator+=(const Vector2<T>& vec)throw();

	//TODO: doxygen
	inline Vector3& operator+=(const Vector3& vec)throw(){
		this->x += vec.x;
		this->y += vec.y;
		this->z += vec.z;
		return (*this);
	}

	//TODO: doxygen
	inline Vector3 operator+(const Vector3& vec)const throw(){
		return (Vector3(*this) += vec);
	}

	//TODO: doxygen
	inline Vector3& operator-=(const Vector3& vec)throw(){
		this->x -= vec.x;
		this->y -= vec.y;
		this->z -= vec.z;
		return *this;
	}

	//TODO: doxygen
	inline Vector3 operator-(const Vector3& vec)const throw(){
		return (Vector3(*this) -= vec);
	}

	//TODO: doxygen
	//unary minus
	inline Vector3 operator-()const throw(){
		return Vector3(*this).Negate();
	}

	//TODO: doxygen
	inline Vector3& operator*=(T num)throw(){
		this->x *= num;
		this->y *= num;
		this->z *= num;
		return (*this);
	}

	//TODO: doxygen
	inline Vector3 operator*(T num)const throw(){
		return (Vector3(*this) *= num);
	}

	//TODO: doxygen
	inline friend Vector3 operator*(T num, const Vector3& vec)throw(){
		return vec * num;
	}

	//TODO: doxygen
	inline Vector3& operator/=(T num)throw(){
		ASSERT(num != 0)
		this->x /= num;
		this->y /= num;
		this->z /= num;
		return (*this);
	}

	//TODO: doxygen
	inline Vector3 operator/(T num)throw(){
		ASSERT_INFO(num != 0, "Vector3::operator/(): division by 0")
		return (Vector3(*this) /= num);
	}

	//TODO: doxygen
	//Dot product
	inline T operator*(const Vector3& vec)const throw(){
		return this->x * vec.x
				+ this->y * vec.y
				+ this->z * vec.z;
	}

	/**
	 * @brief Component-wise multiplication.
	 * Performs component-wise multiplication of two vectors.
	 * The result of such operation is also a vector.
     * @param vec - vector to multiply by.
     * @return Vector resulting from component-wise multiplication.
     */
	inline Vector3 CompMul(const Vector3& vec)const throw(){
		return Vector3(
				this->x * vec.x,
				this->y * vec.y,
				this->z * vec.z
			);
	}

	//TODO: doxygen
	//Cross product
	inline Vector3 operator%(const Vector3& vec)const throw(){
		return Vector3(
				this->y * vec.z - this->z * vec.y,
				this->z * vec.x - this->x * vec.z,
				this->x * vec.y - this->y * vec.x
			);
	}

	//TODO: doxygen
	inline bool IsZero()const throw(){
		return (this->x == 0 && this->y == 0 && this->z == 0);
	}

	//TODO: doxygen
	inline Vector3& Negate()throw(){
		this->x = -this->x;
		this->y = -this->y;
		this->z = -this->z;
		return (*this);
	}

	//TODO: doxygen
	//power 2 of the magnitude
	inline T MagPow2()const throw(){
		return ting::math::Pow2(this->x) + ting::math::Pow2(this->y) + ting::math::Pow2(this->z);
	}

	//TODO: doxygen
	inline T Magnitude()const throw(){
		return ting::math::Sqrt<T>(this->MagPow2());
	}

	//TODO: doxygen
	inline Vector3& Normalize()throw(){
		ASSERT(this->Magnitude() != 0)
		(*this) /= this->Magnitude();
		return (*this);
	}

	//TODO: doxygen
	inline Vector3& ProjectOnto(const Vector3& vec)throw(){
		ASSERT(this->MagPow2() != 0)
		(*this) = vec * (vec * (*this)) / vec.MagPow2();
		return (*this);
	}

	//TODO: doxygen
	//rotate this vector with unit quaternion which represents a rotation
	inline Vector3<T>& Rotate(const Quaternion<T>& q)throw();



#ifdef DEBUG  
	friend std::ostream& operator<<(std::ostream& s, const Vector3<T>& vec){
		s << "(" << vec.x << ", " << vec.y << ", " << vec.z << ")";
		return s;
	}
#endif
};//~class Vector3



}//~namespace



#include "Vector2.hpp"
#include "Matrix4.hpp"
#include "Quaternion.hpp"



namespace morda{

//=================================
// inline functions implementation
//=================================

template <class T> inline Vector3<T>::Vector3(const Vector2<T>& vec)throw() :
		x(vec.x),
		y(vec.y),
		z(T(0))
{}



template <class T> inline Vector3<T>& Vector3<T>::operator=(const Vector2<T>& vec)throw(){
	this->x = vec.x;
	this->y = vec.y;
	this->z = 0;
	return (*this);
}



template <class T> inline Vector3<T>& Vector3<T>::operator+=(const Vector2<T>& vec)throw(){
	this->x += vec.x;
	this->y += vec.y;
	return (*this);
}



template <class T> inline Vector3<T>& Vector3<T>::Rotate(const Quaternion<T>& q)throw(){
	*this = q.ToMatrix4() * (*this);
	return *this;
}



//=====================
// Convenient typedefs
//=====================

typedef Vector3<float> Vec3f;
STATIC_ASSERT(sizeof(Vec3f) == sizeof(float) * 3)
typedef Vector3<double> Vec3d;
STATIC_ASSERT(sizeof(Vec3d) == sizeof(double) * 3)



}//~namespace
