/* The MIT License:

Copyright (c) 2008-2012 Ivan Gagis <igagis@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

// Home page: http://morda.googlecode.com

/**
 * @author Ivan Gagis <igagis@gmail.com>
 */

#pragma once

//This macro definition is part of a workaround to prevent IDE complain about recursive includes.
#define M_VECTOR4_HPP_INCLUDED

#ifdef DEBUG
#	include <iostream>
#endif

#include <ting/debug.hpp>
#include <ting/math.hpp>



namespace morda{



//forward declarations
template <class T> class Vector2;
template <class T> class Vector3;



//TODO: doxygen
template <class T> class Vector4{
public:
	//TODO: doxygen
	T x;
	
	//TODO: doxygen
	T y;
	
	//TODO: doxygen
	T z;
	
	//TODO: doxygen
	T w;

	//TODO: doxygen
	inline Vector4()throw(){}//default constructor

	//TODO: doxygen
	inline Vector4(T x, T y, T z, T w)throw() :
			x(x),
			y(y),
			z(z),
			w(w)
	{}

	//NOTE: copy constructor will be generated by compiler

	//TODO: doxygen
	inline Vector4(T num)throw(){
		this->operator=(num);
	}

	//TODO: doxygen
	inline Vector4(T num, T w)throw() :
			x(num),
			y(num),
			z(num),
			w(w)
	{}

	//TODO: doxygen
	inline Vector4(const Vector2<T>& vec, T z = 0, T w = 1)throw();

	//TODO: doxygen
	inline Vector4(const Vector3<T>& vec, T w = 1)throw();

	//TODO: doxygen
	inline T& operator[](unsigned i)throw(){
		ASSERT(i < 4)
		ASSERT( &((&this->x)[0]) == &this->x)
		ASSERT( &((&this->x)[1]) == &this->y)
		ASSERT( &((&this->x)[2]) == &this->z)
		ASSERT( &((&this->x)[3]) == &this->w)
		return (&this->x)[i];
	}

	//TODO: doxygen
	inline const T& operator[](unsigned i)const throw(){
		ASSERT(i < 4)
		ASSERT( &((&this->x)[0]) == &this->x)
		ASSERT( &((&this->x)[1]) == &this->y)
		ASSERT( &((&this->x)[2]) == &this->z)
		ASSERT( &((&this->x)[3]) == &this->w)
		return (&this->x)[i];
	}

	//NOTE: operator=() will be generated by compiler

	//TODO: doxygen
	inline Vector4& operator=(const Vector3<T>& vec)throw();

	//TODO: doxygen
	inline Vector4& operator=(const Vector2<T>& vec)throw();

	//TODO: doxygen
	inline Vector4& operator=(T num)throw(){
		this->x = num;
		this->y = num;
		this->z = num;
		this->w = num;
		return (*this);
	}

	//TODO: doxygen
	inline Vector4& operator+=(const Vector2<T>& vec)throw();

	//TODO: doxygen
	inline Vector4& operator+=(const Vector3<T>& vec)throw();

	//TODO: doxygen
	inline Vector4& operator+=(const Vector4& vec)throw(){
		this->x += vec.x;
		this->y += vec.y;
		this->z += vec.z;
		this->w += vec.w;
		return *this;
	}

	//TODO: doxygen
	inline Vector4 operator+(const Vector4& vec)const throw(){
		return (Vector4(*this) += vec);
	}

	//TODO: doxygen
	inline Vector4& operator-=(const Vector4& vec)throw(){
		this->x -= vec.x;
		this->y -= vec.y;
		this->z -= vec.z;
		this->w -= vec.w;
		return *this;
	}

	//TODO: doxygen
	inline Vector4 operator-(const Vector4& vec)const throw(){
		return (Vector4(*this) -= vec);
	}

	//TODO: doxygen
	//unary minus
	inline Vector4 operator-()const throw(){
		return Vector4(*this).Negate();
	}

	//TODO: doxygen
	inline Vector4& operator*=(T num)throw(){
		this->x *= num;
		this->y *= num;
		this->z *= num;
		this->w *= num;
		return (*this);
	}

	//TODO: doxygen
	inline Vector4 operator*(T num)const throw(){
		return (Vector4(*this) *= num);
	}

	//TODO: doxygen
	inline friend Vector4 operator*(T num, const Vector4& vec)throw(){
		return vec * num;
	}

	//TODO: doxygen
	inline Vector4& operator/=(T num)throw(){
		ASSERT_INFO(num != 0, "Vector4::operator/=(): division by 0")
		this->x /= num;
		this->y /= num;
		this->z /= num;
		this->w /= num;
		return (*this);
	}

	//TODO: doxygen
	inline Vector4 operator/(T num)throw(){
		ASSERT_INFO(num != 0, "Vector4::operator/(): division by 0")
		return (Vector4(*this) /= num);
	}

	//TODO: doxygen
	//Dot product
	inline T operator*(const Vector4& vec)const throw(){
		return
				this->x * vec.x +
				this->y * vec.y +
				this->z * vec.z +
				this->w * vec.w
			;
	}

	//TODO: doxygen
	//Cross product
	inline Vector4 operator%(const Vector4& vec)const throw(){
		return Vector4(
				this->y * vec.z - this->z * vec.y,
				this->z * vec.x - this->x * vec.z,
				this->x * vec.y - this->y * vec.x,
				this->w * vec.w //TODO:???
			);
	}

	//TODO: doxygen
	inline Vector4& Negate()throw(){
		this->x = -this->x;
		this->y = -this->y;
		this->z = -this->z;
		this->w = -this->w;
		return (*this);
	}

	//TODO: doxygen
	//power 2 of the magnitude
	inline T MagPow2()const throw(){
		return ting::math::Pow2(this->x)
				+ ting::math::Pow2(this->y)
				+ ting::math::Pow2(this->z)
				+ ting::math::Pow2(this->w);
	}

	//TODO: doxygen
	inline T Magnitude()const throw(){
		return ting::math::Sqrt(this->MagPow2());
	}

	//TODO: doxygen
	inline Vector4& Normalize()throw(){
		ASSERT(this->Magnitude() != 0)
		(*this) /= this->Magnitude();
		return (*this);
	}

#ifdef DEBUG
	friend std::ostream& operator<<(std::ostream& s, const Vector4<T>& vec){
		s << "(" << vec.x << ", " << vec.y << ", " << vec.z << ", " << vec.w << ")";
		return s;
	}
#endif
};//~class Vector4



}//~namespace



#ifndef M_VECTOR2_HPP_INCLUDED
#	include "Vector2.hpp"
#endif

#ifndef M_VECTOR3_HPP_INCLUDED
#	include "Vector3.hpp"
#endif



namespace morda{

//=================================
// inline functions implementation
//=================================

template <class T> inline Vector4<T>::Vector4(const Vector2<T>& vec, T z, T w)throw() :
		x(vec.x),
		y(vec.y),
		z(z),
		w(w)
{}



template <class T> inline Vector4<T>::Vector4(const Vector3<T>& vec, T w)throw() :
		x(vec.x),
		y(vec.y),
		z(vec.z),
		w(w)
{}



template <class T> inline Vector4<T>& Vector4<T>::operator=(const Vector3<T>& vec)throw(){
	this->x = vec.x;
	this->y = vec.y;
	this->z = vec.z;
	this->w = 1;
	return *this;
}



template <class T> inline Vector4<T>& Vector4<T>::operator=(const Vector2<T>& vec)throw(){
	this->x = vec.x;
	this->y = vec.y;
	this->z = 0;
	this->w = 1;
	return *this;
}



template <class T> inline Vector4<T>& Vector4<T>::operator+=(const Vector2<T>& vec)throw(){
	this->x += vec.x;
	this->y += vec.y;
	return *this;
}



template <class T> inline Vector4<T>& Vector4<T>::operator+=(const Vector3<T>& vec)throw(){
	this->x += vec.x;
	this->y += vec.y;
	this->z += vec.z;
	return *this;
}



//=====================
// Convenient typedefs
//=====================

typedef Vector4<float> Vec4f;
STATIC_ASSERT(sizeof(Vec4f) == sizeof(float) * 4)
typedef Vector4<double> Vec4d;
STATIC_ASSERT(sizeof(Vec4d) == sizeof(double) * 4)



}//~namespace
